============================================================
üìÑ Document 1
üîñ Metadata: {'skills': 'Python, FastAPI, Flask, Git, REST APIs, Asynchronous Data Flows, GPT-4, Hugging Face Transformers, LangChain, Prompt Engineering, RAG, PyTorch, TensorFlow, Scikit-learn, XGBoost, Model Evaluation & Tuning, FAISS, Embeddings, Semantic Search, GCP (Dataproc, BigQuery, Cloud Run), Docker, Kubernetes, CI/CD, SQL, PySpark, Apache Spark, Document Chunking, Text Classification, NLP Pipelines, Secure Coding, Version Control, Agile Development, Jupyter, VSCode, GitHub, Linux', 'projects': 'RAG-Based Q&A System with LLM Integration, AI Resume Tailor ‚Äì GenAI-Powered Agent for Document Customization, Traffic Congestion Prediction using Big Data (GCP, PySpark, ELK)', 'tech_stack': 'LangChain, FAISS, Python, GPT-4, docker, GCP, PySpark, REST API, ELK Stack', 'tags': 'Machine Learning, Natural Language Processing, Cloud Computing, Containerization, AI, Big Data', 'experience': 'PROFESSIONAL EXPERIENCE', 'education': 'EDUCATION', 'section_headers': 'SUMMARY, SKILLS, EDUCATION, PROFESSIONAL EXPERIENCE, PROJECTS', 'section': 'full', 'type': 'full_resume'}
üìù Content:
Shubham Patel
EMAIL_REDACTED | PHONE_REDACTED |Scarborough ON
LinkedIn | GitHub | Portfolio
SUMMARY
Machine Learning Engineer specializing in building AI agents, RAG applications, and fine-tuning large language models (LLMs). Skilled in LangChain, Hugging Face Transformers, and vector databases for context-aware retrieval. Experienced in containerized deployments with Docker and Kubernetes, developing secure, cloud-native AI applications on GCP. Adept at NLP pipelines, knowledge graph integration, and RESTful API development.
SKILLS
Programming & APIs: Python, FastAPI, Flask, Git, REST APIs, Asynchronous Data Flows
GenAI & LLMs: GPT-4, Hugging Face Transformers, LangChain, Prompt Engineering, RAG
ML Development: PyTorch, TensorFlow, Scikit-learn, XGBoost, Model Evaluation & Tuning
Vector Search: FAISS, Embeddings, Semantic Search
Cloud & Deployment: GCP (Dataproc, BigQuery, Cloud Run), Docker, Kubernetes, CI/CD
Data Engineering & NLP: SQL, PySpark, Apache Spark, Document Chunking, Text Classification, NLP Pipelines
Security & Best Practices: Secure Coding, Version Control, Agile Development
Tools & Collaboration: Jupyter, VSCode, GitHub, Linux
EDUCATION
Gained hands-on experience in supervised/unsupervised learning, deep learning, and reinforcement learning.
Built and optimized models using scikit-learn, TensorFlow, Keras, and PyTorch.
Worked on real-world problems in NLP, computer vision, and predictive analytics.
Designed scalable ML pipelines, including data preprocessing, feature engineering, and hyperparameter tuning.
Explored big data and distributed ML using Apache Spark, Google Cloud Dataproc, and Spark MLlib.
Learned ML deployment techniques with Flask APIs, Docker, and basic Kubernetes for containerized inference.
Built native and cross-platform apps using Kotlin, Swift, JavaScript, and Flutter, applying MVVM and clean architecture principle.
Completed capstone project (SwiftTrend) with full-stack features: product search, PayPal integration, admin CRM, and deployment via Android Studio & Xcode. 
Gained strong foundation in C++, Python, OOP, DBMS, assembly, and basic machine learning using scikit-learn.
Developed Leafio (major project): a CNN-based plant disease detection app and published a research paper comparing VGG16, Xception, and MobileNet architectures. 
PROFESSIONAL EXPERIENCE
Developed a real-time trash detection system using a YOLO Nano-based model, leveraging transfer learning.
Led the data annotation process to create high-quality labeled training data, improving generalization and robustness across varied conditions.
Applied targeted data augmentation to enhance dataset diversity and improve detection under environmental noise.
Tuned model performance through extensive hyperparameter optimization, achieving mAP@50: 82, mAP@50‚Äì95: 0.51, precision: 0.85, and recall: 0.71 on validation sets.
Designed and tested multiple training strategies to maximize real-world performance, enabling reliable deployment in resource-constrained robotic environments.
PROJECTS
RAG-Based Q&A System with LLM Integration
Engineered a LangChain-powered Retrieval-Augmented Generation pipeline leveraging FAISS embeddings for domain-specific Q&A over private datasets.
Implemented advanced retrieval enhancements including multi-query rewriting, semantic reranking, and sub-question decomposition to improve accuracy and context relevance.
Deployed as a Flask API, enabling seamless integration into cloud-native workflows and supporting real-time, context-aware responses.
AI Resume Tailor ‚Äì GenAI-Powered Agent for Document Customization
Developed an autonomous AI agent using GPT-4, LangChain, and python-docx to customize resumes dynamically based on job descriptions.
Integrated vector search to effectively match job postings with resume content and implemented JSON-based prompt chaining to ensure structured, high-quality output.
Containerized the application with Docker and deployed it on Google Cloud Platform (GCP), demonstrating scalable GenAI deployment best practices.
Traffic Congestion Prediction using Big Data (GCP, PySpark, ELK)
Designed a distributed PySpark pipeline processing 94.5M+ NYC DOT traffic records on GCP Dataproc for congestion level classification.
Trained and tuned a Random Forest model with engineered temporal features, achieving ~85% accuracy.
Packaged the model as a REST API, integrated with ELK Stack for real-time monitoring and analytics in production-like environments.
============================================================

============================================================
üìÑ Document 2
üîñ Metadata: {'section': 'summary', 'type': 'section'}
üìù Content:
Machine Learning Engineer specializing in building AI agents, RAG applications, and fine-tuning large language models (LLMs). Skilled in LangChain, Hugging Face Transformers, and vector databases for context-aware retrieval. Experienced in containerized deployments with Docker and Kubernetes, developing secure, cloud-native AI applications on GCP. Adept at NLP pipelines, knowledge graph integration, and RESTful API development.
============================================================

============================================================
üìÑ Document 3
üîñ Metadata: {'section': 'skills', 'type': 'section'}
üìù Content:
Programming & APIs: Python, FastAPI, Flask, Git, REST APIs, Asynchronous Data Flows
GenAI & LLMs: GPT-4, Hugging Face Transformers, LangChain, Prompt Engineering, RAG
ML Development: PyTorch, TensorFlow, Scikit-learn, XGBoost, Model Evaluation & Tuning
Vector Search: FAISS, Embeddings, Semantic Search
Cloud & Deployment: GCP (Dataproc, BigQuery, Cloud Run), Docker, Kubernetes, CI/CD
Data Engineering & NLP: SQL, PySpark, Apache Spark, Document Chunking, Text Classification, NLP Pipelines
Security & Best Practices: Secure Coding, Version Control, Agile Development
Tools & Collaboration: Jupyter, VSCode, GitHub, Linux
============================================================

============================================================
üìÑ Document 4
üîñ Metadata: {'section': 'education', 'type': 'section'}
üìù Content:
Gained hands-on experience in supervised/unsupervised learning, deep learning, and reinforcement learning.
Built and optimized models using scikit-learn, TensorFlow, Keras, and PyTorch.
Worked on real-world problems in NLP, computer vision, and predictive analytics.
Designed scalable ML pipelines, including data preprocessing, feature engineering, and hyperparameter tuning.
Explored big data and distributed ML using Apache Spark, Google Cloud Dataproc, and Spark MLlib.
Learned ML deployment techniques with Flask APIs, Docker, and basic Kubernetes for containerized inference.
Built native and cross-platform apps using Kotlin, Swift, JavaScript, and Flutter, applying MVVM and clean architecture principle.
Completed capstone project (SwiftTrend) with full-stack features: product search, PayPal integration, admin CRM, and deployment via Android Studio & Xcode. 
Gained strong foundation in C++, Python, OOP, DBMS, assembly, and basic machine learning using scikit-learn.
Developed Leafio (major project): a CNN-based plant disease detection app and published a research paper comparing VGG16, Xception, and MobileNet architectures.
============================================================

============================================================
üìÑ Document 5
üîñ Metadata: {'section': 'professional experience', 'type': 'section'}
üìù Content:
Developed a real-time trash detection system using a YOLO Nano-based model, leveraging transfer learning.
Led the data annotation process to create high-quality labeled training data, improving generalization and robustness across varied conditions.
Applied targeted data augmentation to enhance dataset diversity and improve detection under environmental noise.
Tuned model performance through extensive hyperparameter optimization, achieving mAP@50: 82, mAP@50‚Äì95: 0.51, precision: 0.85, and recall: 0.71 on validation sets.
Designed and tested multiple training strategies to maximize real-world performance, enabling reliable deployment in resource-constrained robotic environments.
============================================================

============================================================
üìÑ Document 6
üîñ Metadata: {'section': 'projects', 'type': 'section'}
üìù Content:
RAG-Based Q&A System with LLM Integration
Engineered a LangChain-powered Retrieval-Augmented Generation pipeline leveraging FAISS embeddings for domain-specific Q&A over private datasets.
Implemented advanced retrieval enhancements including multi-query rewriting, semantic reranking, and sub-question decomposition to improve accuracy and context relevance.
Deployed as a Flask API, enabling seamless integration into cloud-native workflows and supporting real-time, context-aware responses.
AI Resume Tailor ‚Äì GenAI-Powered Agent for Document Customization
Developed an autonomous AI agent using GPT-4, LangChain, and python-docx to customize resumes dynamically based on job descriptions.
Integrated vector search to effectively match job postings with resume content and implemented JSON-based prompt chaining to ensure structured, high-quality output.
Containerized the application with Docker and deployed it on Google Cloud Platform (GCP), demonstrating scalable GenAI deployment best practices.
Traffic Congestion Prediction using Big Data (GCP, PySpark, ELK)
Designed a distributed PySpark pipeline processing 94.5M+ NYC DOT traffic records on GCP Dataproc for congestion level classification.
Trained and tuned a Random Forest model with engineered temporal features, achieving ~85% accuracy.
Packaged the model as a REST API, integrated with ELK Stack for real-time monitoring and analytics in production-like environments.
============================================================

============================================================
üìÑ Document 7
üîñ Metadata: {'section': 'projects', 'type': 'item'}
üìù Content:
RAG-Based Q&A System with LLM Integration
Engineered a LangChain-powered Retrieval-Augmented Generation pipeline leveraging FAISS embeddings for domain-specific Q&A over private datasets.
Implemented advanced retrieval enhancements including multi-query rewriting, semantic reranking, and sub-question decomposition to improve accuracy and context relevance.
Deployed as a Flask API, enabling seamless integration into cloud-native workflows and supporting real-time, context-aware responses.
============================================================

============================================================
üìÑ Document 8
üîñ Metadata: {'section': 'projects', 'type': 'item'}
üìù Content:
AI Resume Tailor ‚Äì GenAI-Powered Agent for Document Customization
Developed an autonomous AI agent using GPT-4, LangChain, and python-docx to customize resumes dynamically based on job descriptions.
Integrated vector search to effectively match job postings with resume content and implemented JSON-based prompt chaining to ensure structured, high-quality output.
Containerized the application with Docker and deployed it on Google Cloud Platform (GCP), demonstrating scalable GenAI deployment best practices.
============================================================

============================================================
üìÑ Document 9
üîñ Metadata: {'section': 'projects', 'type': 'item'}
üìù Content:
Traffic Congestion Prediction using Big Data (GCP,
============================================================

============================================================
üìÑ Document 10
üîñ Metadata: {'section': 'projects', 'type': 'item'}
üìù Content:
PySpark,
============================================================

============================================================
üìÑ Document 11
üîñ Metadata: {'section': 'projects', 'type': 'item'}
üìù Content:
ELK)
Designed a distributed
============================================================

============================================================
üìÑ Document 12
üîñ Metadata: {'section': 'projects', 'type': 'item'}
üìù Content:
PySpark pipeline processing 94.5M+ NYC DOT traffic records on GCP Dataproc for congestion level classification.
Trained and tuned a Random Forest model with engineered temporal features, achieving ~85% accuracy.
Packaged the model as a REST API, integrated with ELK Stack for real-time monitoring and analytics in production-like environments.
============================================================

